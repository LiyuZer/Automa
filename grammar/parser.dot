digraph ParseTree {
    node [shape=box];
    node0 [label="program"];
    node1 [label="mainGraph"];
    node0 -> node1;
    node2 [label="RIGHT_BRACE: }"];
    node1 -> node2;
    node3 [label="LEFT_BRACE: {"];
    node1 -> node3;
    node4 [label="graphDef"];
    node1 -> node4;
    node5 [label="memoryDef"];
    node4 -> node5;
    node6 [label="RIGHT_BRACE: }"];
    node5 -> node6;
    node7 [label="LEFT_BRACE: {"];
    node5 -> node7;
    node8 [label="tupleItems"];
    node5 -> node8;
    node9 [label="varDefenition"];
    node8 -> node9;
    node10 [label="expression"];
    node9 -> node10;
    node11 [label="literal"];
    node10 -> node11;
    node12 [label="INTEGER_LITERAL: 0"];
    node11 -> node12;
    node13 [label="COLON: :"];
    node9 -> node13;
    node14 [label="variable"];
    node9 -> node14;
    node15 [label="IDENTIFIER: Girum"];
    node14 -> node15;
    node16 [label="varDefenition"];
    node8 -> node16;
    node17 [label="expression"];
    node16 -> node17;
    node18 [label="literal"];
    node17 -> node18;
    node19 [label="INTEGER_LITERAL: 1"];
    node18 -> node19;
    node20 [label="COLON: :"];
    node16 -> node20;
    node21 [label="variable"];
    node16 -> node21;
    node22 [label="IDENTIFIER: Tigist"];
    node21 -> node22;
    node23 [label="COMMA: ,"];
    node8 -> node23;
    node24 [label="MEMORY: memory"];
    node5 -> node24;
    node25 [label="afterAccept"];
    node4 -> node25;
    node26 [label="SEMICOLON: ;"];
    node25 -> node26;
    node27 [label="RIGHT_BRACE: }"];
    node25 -> node27;
    node28 [label="expression"];
    node25 -> node28;
    node29 [label="variable"];
    node28 -> node29;
    node30 [label="IDENTIFIER: num"];
    node29 -> node30;
    node31 [label="LEFT_BRACE: {"];
    node25 -> node31;
    node32 [label="AFTER_ACCEPT: afterAccept"];
    node25 -> node32;
    node33 [label="nodeDef"];
    node4 -> node33;
    node34 [label="nodeDefStatement"];
    node33 -> node34;
    node35 [label="nodeTypes"];
    node34 -> node35;
    node36 [label="START_NODE: startNode"];
    node35 -> node36;
    node37 [label="DOUBLE_COLON: ::"];
    node34 -> node37;
    node38 [label="IDENTIFIER: start"];
    node34 -> node38;
    node39 [label="nodeDefStatement"];
    node33 -> node39;
    node40 [label="nodeTypes"];
    node39 -> node40;
    node41 [label="ACCEPT_NODE: acceptNode"];
    node40 -> node41;
    node42 [label="DOUBLE_COLON: ::"];
    node39 -> node42;
    node43 [label="IDENTIFIER: accept"];
    node39 -> node43;
    node44 [label="SEMICOLON: ;"];
    node33 -> node44;
    node45 [label="SEMICOLON: ;"];
    node33 -> node45;
    node46 [label="RIGHT_BRACE: }"];
    node33 -> node46;
    node47 [label="LEFT_BRACE: {"];
    node33 -> node47;
    node48 [label="NODE_DEF: nodeDef"];
    node33 -> node48;
    node49 [label="transitionDef"];
    node4 -> node49;
    node50 [label="transitionStatement"];
    node49 -> node50;
    node51 [label="operations"];
    node50 -> node51;
    node52 [label="RIGHT_PAREN: )"];
    node51 -> node52;
    node53 [label="operationStatement"];
    node51 -> node53;
    node54 [label="expression"];
    node53 -> node54;
    node55 [label="variable"];
    node54 -> node55;
    node56 [label="IDENTIFIER: i"];
    node55 -> node56;
    node57 [label="expression"];
    node53 -> node57;
    node58 [label="variable"];
    node57 -> node58;
    node59 [label="IDENTIFIER: num"];
    node58 -> node59;
    node60 [label="COMMA: ,"];
    node53 -> node60;
    node61 [label="LEFT_PAREN: ("];
    node51 -> node61;
    node62 [label="OPERATIONS: operations"];
    node50 -> node62;
    node63 [label="COMMA: ,"];
    node50 -> node63;
    node64 [label="COLON: :"];
    node50 -> node64;
    node65 [label="COLON: :"];
    node50 -> node65;
    node66 [label="CONDITIONS: conditions"];
    node50 -> node66;
    node67 [label="conditions"];
    node50 -> node67;
    node68 [label="RIGHT_PAREN: )"];
    node67 -> node68;
    node69 [label="conditionStatement"];
    node67 -> node69;
    node70 [label="expression"];
    node69 -> node70;
    node71 [label="variable"];
    node70 -> node71;
    node72 [label="IDENTIFIER: i"];
    node71 -> node72;
    node73 [label="LEFT_PAREN: ("];
    node67 -> node73;
    node74 [label="ARROW_EQUALS: =>"];
    node50 -> node74;
    node75 [label="toNode"];
    node50 -> node75;
    node76 [label="IDENTIFIER: start"];
    node75 -> node76;
    node77 [label="ARROW: ->"];
    node50 -> node77;
    node78 [label="fromNode"];
    node50 -> node78;
    node79 [label="IDENTIFIER: start"];
    node78 -> node79;
    node80 [label="transitionStatement"];
    node49 -> node80;
    node81 [label="operations"];
    node80 -> node81;
    node82 [label="RIGHT_PAREN: )"];
    node81 -> node82;
    node83 [label="operationStatement"];
    node81 -> node83;
    node84 [label="LEFT_PAREN: ("];
    node81 -> node84;
    node85 [label="OPERATIONS: operations"];
    node80 -> node85;
    node86 [label="COMMA: ,"];
    node80 -> node86;
    node87 [label="COLON: :"];
    node80 -> node87;
    node88 [label="COLON: :"];
    node80 -> node88;
    node89 [label="CONDITIONS: conditions"];
    node80 -> node89;
    node90 [label="conditions"];
    node80 -> node90;
    node91 [label="RIGHT_PAREN: )"];
    node90 -> node91;
    node92 [label="conditionStatement"];
    node90 -> node92;
    node93 [label="expression"];
    node92 -> node93;
    node94 [label="variable"];
    node93 -> node94;
    node95 [label="IDENTIFIER: i"];
    node94 -> node95;
    node96 [label="LEFT_PAREN: ("];
    node90 -> node96;
    node97 [label="ARROW_EQUALS: =>"];
    node80 -> node97;
    node98 [label="toNode"];
    node80 -> node98;
    node99 [label="IDENTIFIER: accept"];
    node98 -> node99;
    node100 [label="ARROW: ->"];
    node80 -> node100;
    node101 [label="fromNode"];
    node80 -> node101;
    node102 [label="IDENTIFIER: start"];
    node101 -> node102;
    node103 [label="TRANSITIONS: transitions"];
    node49 -> node103;
    node104 [label="RIGHT_BRACE: }"];
    node49 -> node104;
    node105 [label="SEMICOLON: ;"];
    node49 -> node105;
    node106 [label="SEMICOLON: ;"];
    node49 -> node106;
    node107 [label="LEFT_BRACE: {"];
    node49 -> node107;
    node108 [label="MAIN: main"];
    node1 -> node108;
    node109 [label="GRAPH: graph"];
    node1 -> node109;
}
