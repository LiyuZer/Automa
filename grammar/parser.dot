digraph ParseTree {
    node [shape=box];
    node0 [label="program"];
    node1 [label="mainGraph"];
    node0 -> node1;
    node2 [label="RIGHT_BRACE: }"];
    node1 -> node2;
    node3 [label="LEFT_BRACE: {"];
    node1 -> node3;
    node4 [label="graphDef"];
    node1 -> node4;
    node5 [label="memoryDef"];
    node4 -> node5;
    node6 [label="RIGHT_BRACE: }"];
    node5 -> node6;
    node7 [label="LEFT_BRACE: {"];
    node5 -> node7;
    node8 [label="tupleItems"];
    node5 -> node8;
    node9 [label="varDefenition"];
    node8 -> node9;
    node10 [label="expression"];
    node9 -> node10;
    node11 [label="RIGHT_PAREN: )"];
    node10 -> node11;
    node12 [label="expression"];
    node10 -> node12;
    node13 [label="RIGHT_PAREN: )"];
    node12 -> node13;
    node14 [label="expression"];
    node12 -> node14;
    node15 [label="RIGHT_PAREN: )"];
    node14 -> node15;
    node16 [label="expression"];
    node14 -> node16;
    node17 [label="RIGHT_PAREN: )"];
    node16 -> node17;
    node18 [label="expression"];
    node16 -> node18;
    node19 [label="RIGHT_PAREN: )"];
    node18 -> node19;
    node20 [label="expression"];
    node18 -> node20;
    node21 [label="RIGHT_PAREN: )"];
    node20 -> node21;
    node22 [label="expression"];
    node20 -> node22;
    node23 [label="RIGHT_PAREN: )"];
    node22 -> node23;
    node24 [label="expression"];
    node22 -> node24;
    node25 [label="RIGHT_PAREN: )"];
    node24 -> node25;
    node26 [label="expression"];
    node24 -> node26;
    node27 [label="RIGHT_PAREN: )"];
    node26 -> node27;
    node28 [label="expression"];
    node26 -> node28;
    node29 [label="RIGHT_PAREN: )"];
    node28 -> node29;
    node30 [label="expression"];
    node28 -> node30;
    node31 [label="RIGHT_PAREN: )"];
    node30 -> node31;
    node32 [label="expression"];
    node30 -> node32;
    node33 [label="RIGHT_PAREN: )"];
    node32 -> node33;
    node34 [label="expression"];
    node32 -> node34;
    node35 [label="RIGHT_PAREN: )"];
    node34 -> node35;
    node36 [label="expression"];
    node34 -> node36;
    node37 [label="RIGHT_PAREN: )"];
    node36 -> node37;
    node38 [label="expression"];
    node36 -> node38;
    node39 [label="RIGHT_PAREN: )"];
    node38 -> node39;
    node40 [label="expression"];
    node38 -> node40;
    node41 [label="RIGHT_PAREN: )"];
    node40 -> node41;
    node42 [label="expression"];
    node40 -> node42;
    node43 [label="RIGHT_PAREN: )"];
    node42 -> node43;
    node44 [label="expression"];
    node42 -> node44;
    node45 [label="RIGHT_PAREN: )"];
    node44 -> node45;
    node46 [label="expression"];
    node44 -> node46;
    node47 [label="RIGHT_PAREN: )"];
    node46 -> node47;
    node48 [label="expression"];
    node46 -> node48;
    node49 [label="RIGHT_PAREN: )"];
    node48 -> node49;
    node50 [label="expression"];
    node48 -> node50;
    node51 [label="RIGHT_PAREN: )"];
    node50 -> node51;
    node52 [label="expression"];
    node50 -> node52;
    node53 [label="RIGHT_PAREN: )"];
    node52 -> node53;
    node54 [label="expression"];
    node52 -> node54;
    node55 [label="RIGHT_PAREN: )"];
    node54 -> node55;
    node56 [label="expression"];
    node54 -> node56;
    node57 [label="RIGHT_PAREN: )"];
    node56 -> node57;
    node58 [label="expression"];
    node56 -> node58;
    node59 [label="RIGHT_PAREN: )"];
    node58 -> node59;
    node60 [label="expression"];
    node58 -> node60;
    node61 [label="level1"];
    node60 -> node61;
    node62 [label="binary_operations"];
    node61 -> node62;
    node63 [label="expression"];
    node62 -> node63;
    node64 [label="level1"];
    node63 -> node64;
    node65 [label="level2"];
    node64 -> node65;
    node66 [label="literal"];
    node65 -> node66;
    node67 [label="INTEGER_LITERAL: 2"];
    node66 -> node67;
    node68 [label="binary_operators"];
    node62 -> node68;
    node69 [label="PLUS: +"];
    node68 -> node69;
    node70 [label="level2"];
    node62 -> node70;
    node71 [label="literal"];
    node70 -> node71;
    node72 [label="INTEGER_LITERAL: 4"];
    node71 -> node72;
    node73 [label="LEFT_PAREN: ("];
    node58 -> node73;
    node74 [label="LEFT_PAREN: ("];
    node56 -> node74;
    node75 [label="LEFT_PAREN: ("];
    node54 -> node75;
    node76 [label="LEFT_PAREN: ("];
    node52 -> node76;
    node77 [label="LEFT_PAREN: ("];
    node50 -> node77;
    node78 [label="LEFT_PAREN: ("];
    node48 -> node78;
    node79 [label="LEFT_PAREN: ("];
    node46 -> node79;
    node80 [label="LEFT_PAREN: ("];
    node44 -> node80;
    node81 [label="LEFT_PAREN: ("];
    node42 -> node81;
    node82 [label="LEFT_PAREN: ("];
    node40 -> node82;
    node83 [label="LEFT_PAREN: ("];
    node38 -> node83;
    node84 [label="LEFT_PAREN: ("];
    node36 -> node84;
    node85 [label="LEFT_PAREN: ("];
    node34 -> node85;
    node86 [label="LEFT_PAREN: ("];
    node32 -> node86;
    node87 [label="LEFT_PAREN: ("];
    node30 -> node87;
    node88 [label="LEFT_PAREN: ("];
    node28 -> node88;
    node89 [label="LEFT_PAREN: ("];
    node26 -> node89;
    node90 [label="LEFT_PAREN: ("];
    node24 -> node90;
    node91 [label="LEFT_PAREN: ("];
    node22 -> node91;
    node92 [label="LEFT_PAREN: ("];
    node20 -> node92;
    node93 [label="LEFT_PAREN: ("];
    node18 -> node93;
    node94 [label="LEFT_PAREN: ("];
    node16 -> node94;
    node95 [label="LEFT_PAREN: ("];
    node14 -> node95;
    node96 [label="LEFT_PAREN: ("];
    node12 -> node96;
    node97 [label="LEFT_PAREN: ("];
    node10 -> node97;
    node98 [label="COLON: :"];
    node9 -> node98;
    node99 [label="variable"];
    node9 -> node99;
    node100 [label="IDENTIFIER: counter"];
    node99 -> node100;
    node101 [label="varDefenition"];
    node8 -> node101;
    node102 [label="expression"];
    node101 -> node102;
    node103 [label="level1"];
    node102 -> node103;
    node104 [label="level2"];
    node103 -> node104;
    node105 [label="literal"];
    node104 -> node105;
    node106 [label="CHAR_LITERAL: ' '"];
    node105 -> node106;
    node107 [label="COLON: :"];
    node101 -> node107;
    node108 [label="variable"];
    node101 -> node108;
    node109 [label="IDENTIFIER: result"];
    node108 -> node109;
    node110 [label="varDefenition"];
    node8 -> node110;
    node111 [label="expression"];
    node110 -> node111;
    node112 [label="level1"];
    node111 -> node112;
    node113 [label="level2"];
    node112 -> node113;
    node114 [label="literal"];
    node113 -> node114;
    node115 [label="boolLiteral"];
    node114 -> node115;
    node116 [label="FALSE: false"];
    node115 -> node116;
    node117 [label="COLON: :"];
    node110 -> node117;
    node118 [label="variable"];
    node110 -> node118;
    node119 [label="IDENTIFIER: flag"];
    node118 -> node119;
    node120 [label="COMMA: ,"];
    node8 -> node120;
    node121 [label="COMMA: ,"];
    node8 -> node121;
    node122 [label="MEMORY: memory"];
    node5 -> node122;
    node123 [label="nodeDef"];
    node4 -> node123;
    node124 [label="nodeDefStatement"];
    node123 -> node124;
    node125 [label="DOUBLE_COLON: ::"];
    node124 -> node125;
    node126 [label="nodeTypes"];
    node124 -> node126;
    node127 [label="START_NODE: startNode"];
    node126 -> node127;
    node128 [label="IDENTIFIER: start"];
    node124 -> node128;
    node129 [label="nodeDefStatement"];
    node123 -> node129;
    node130 [label="IDENTIFIER: mid"];
    node129 -> node130;
    node131 [label="nodeDefStatement"];
    node123 -> node131;
    node132 [label="IDENTIFIER: check"];
    node131 -> node132;
    node133 [label="nodeDefStatement"];
    node123 -> node133;
    node134 [label="DOUBLE_COLON: ::"];
    node133 -> node134;
    node135 [label="nodeTypes"];
    node133 -> node135;
    node136 [label="ACCEPT_NODE: acceptNode"];
    node135 -> node136;
    node137 [label="IDENTIFIER: accept"];
    node133 -> node137;
    node138 [label="nodeDefStatement"];
    node123 -> node138;
    node139 [label="DOUBLE_COLON: ::"];
    node138 -> node139;
    node140 [label="nodeTypes"];
    node138 -> node140;
    node141 [label="REJECT_NODE: rejectNode"];
    node140 -> node141;
    node142 [label="IDENTIFIER: reject"];
    node138 -> node142;
    node143 [label="SEMICOLON: ;"];
    node123 -> node143;
    node144 [label="SEMICOLON: ;"];
    node123 -> node144;
    node145 [label="SEMICOLON: ;"];
    node123 -> node145;
    node146 [label="SEMICOLON: ;"];
    node123 -> node146;
    node147 [label="SEMICOLON: ;"];
    node123 -> node147;
    node148 [label="RIGHT_BRACE: }"];
    node123 -> node148;
    node149 [label="LEFT_BRACE: {"];
    node123 -> node149;
    node150 [label="NODE_DEF: nodeDef"];
    node123 -> node150;
    node151 [label="transitionDef"];
    node4 -> node151;
    node152 [label="transitionStatement"];
    node151 -> node152;
    node153 [label="operations"];
    node152 -> node153;
    node154 [label="RIGHT_PAREN: )"];
    node153 -> node154;
    node155 [label="operationStatement"];
    node153 -> node155;
    node156 [label="expression"];
    node155 -> node156;
    node157 [label="level1"];
    node156 -> node157;
    node158 [label="level2"];
    node157 -> node158;
    node159 [label="variable"];
    node158 -> node159;
    node160 [label="IDENTIFIER: counter"];
    node159 -> node160;
    node161 [label="LEFT_PAREN: ("];
    node153 -> node161;
    node162 [label="OPERATIONS: operations"];
    node152 -> node162;
    node163 [label="COMMA: ,"];
    node152 -> node163;
    node164 [label="COLON: :"];
    node152 -> node164;
    node165 [label="COLON: :"];
    node152 -> node165;
    node166 [label="CONDITIONS: conditions"];
    node152 -> node166;
    node167 [label="conditions"];
    node152 -> node167;
    node168 [label="RIGHT_PAREN: )"];
    node167 -> node168;
    node169 [label="conditionStatement"];
    node167 -> node169;
    node170 [label="expression"];
    node169 -> node170;
    node171 [label="level1"];
    node170 -> node171;
    node172 [label="level2"];
    node171 -> node172;
    node173 [label="variable"];
    node172 -> node173;
    node174 [label="IDENTIFIER: counter"];
    node173 -> node174;
    node175 [label="LEFT_PAREN: ("];
    node167 -> node175;
    node176 [label="ARROW_EQUALS: =>"];
    node152 -> node176;
    node177 [label="toNode"];
    node152 -> node177;
    node178 [label="IDENTIFIER: mid"];
    node177 -> node178;
    node179 [label="ARROW: ->"];
    node152 -> node179;
    node180 [label="fromNode"];
    node152 -> node180;
    node181 [label="IDENTIFIER: start"];
    node180 -> node181;
    node182 [label="transitionStatement"];
    node151 -> node182;
    node183 [label="operations"];
    node182 -> node183;
    node184 [label="RIGHT_PAREN: )"];
    node183 -> node184;
    node185 [label="operationStatement"];
    node183 -> node185;
    node186 [label="expression"];
    node185 -> node186;
    node187 [label="level1"];
    node186 -> node187;
    node188 [label="level2"];
    node187 -> node188;
    node189 [label="variable"];
    node188 -> node189;
    node190 [label="IDENTIFIER: flag"];
    node189 -> node190;
    node191 [label="LEFT_PAREN: ("];
    node183 -> node191;
    node192 [label="OPERATIONS: operations"];
    node182 -> node192;
    node193 [label="COMMA: ,"];
    node182 -> node193;
    node194 [label="COLON: :"];
    node182 -> node194;
    node195 [label="COLON: :"];
    node182 -> node195;
    node196 [label="CONDITIONS: conditions"];
    node182 -> node196;
    node197 [label="conditions"];
    node182 -> node197;
    node198 [label="RIGHT_PAREN: )"];
    node197 -> node198;
    node199 [label="conditionStatement"];
    node197 -> node199;
    node200 [label="expression"];
    node199 -> node200;
    node201 [label="level1"];
    node200 -> node201;
    node202 [label="level2"];
    node201 -> node202;
    node203 [label="variable"];
    node202 -> node203;
    node204 [label="IDENTIFIER: flag"];
    node203 -> node204;
    node205 [label="LEFT_PAREN: ("];
    node197 -> node205;
    node206 [label="ARROW_EQUALS: =>"];
    node182 -> node206;
    node207 [label="toNode"];
    node182 -> node207;
    node208 [label="IDENTIFIER: check"];
    node207 -> node208;
    node209 [label="ARROW: ->"];
    node182 -> node209;
    node210 [label="fromNode"];
    node182 -> node210;
    node211 [label="IDENTIFIER: mid"];
    node210 -> node211;
    node212 [label="transitionStatement"];
    node151 -> node212;
    node213 [label="operations"];
    node212 -> node213;
    node214 [label="RIGHT_PAREN: )"];
    node213 -> node214;
    node215 [label="operationStatement"];
    node213 -> node215;
    node216 [label="expression"];
    node215 -> node216;
    node217 [label="level1"];
    node216 -> node217;
    node218 [label="level2"];
    node217 -> node218;
    node219 [label="literal"];
    node218 -> node219;
    node220 [label="CHAR_LITERAL: ' '"];
    node219 -> node220;
    node221 [label="LEFT_PAREN: ("];
    node213 -> node221;
    node222 [label="OPERATIONS: operations"];
    node212 -> node222;
    node223 [label="COMMA: ,"];
    node212 -> node223;
    node224 [label="COLON: :"];
    node212 -> node224;
    node225 [label="COLON: :"];
    node212 -> node225;
    node226 [label="CONDITIONS: conditions"];
    node212 -> node226;
    node227 [label="conditions"];
    node212 -> node227;
    node228 [label="RIGHT_PAREN: )"];
    node227 -> node228;
    node229 [label="conditionStatement"];
    node227 -> node229;
    node230 [label="expression"];
    node229 -> node230;
    node231 [label="level1"];
    node230 -> node231;
    node232 [label="level2"];
    node231 -> node232;
    node233 [label="variable"];
    node232 -> node233;
    node234 [label="IDENTIFIER: success"];
    node233 -> node234;
    node235 [label="LEFT_PAREN: ("];
    node227 -> node235;
    node236 [label="ARROW_EQUALS: =>"];
    node212 -> node236;
    node237 [label="toNode"];
    node212 -> node237;
    node238 [label="IDENTIFIER: accept"];
    node237 -> node238;
    node239 [label="ARROW: ->"];
    node212 -> node239;
    node240 [label="fromNode"];
    node212 -> node240;
    node241 [label="IDENTIFIER: check"];
    node240 -> node241;
    node242 [label="transitionStatement"];
    node151 -> node242;
    node243 [label="operations"];
    node242 -> node243;
    node244 [label="RIGHT_PAREN: )"];
    node243 -> node244;
    node245 [label="operationStatement"];
    node243 -> node245;
    node246 [label="expression"];
    node245 -> node246;
    node247 [label="level1"];
    node246 -> node247;
    node248 [label="level2"];
    node247 -> node248;
    node249 [label="variable"];
    node248 -> node249;
    node250 [label="IDENTIFIER: failure"];
    node249 -> node250;
    node251 [label="LEFT_PAREN: ("];
    node243 -> node251;
    node252 [label="OPERATIONS: operations"];
    node242 -> node252;
    node253 [label="COMMA: ,"];
    node242 -> node253;
    node254 [label="COLON: :"];
    node242 -> node254;
    node255 [label="COLON: :"];
    node242 -> node255;
    node256 [label="CONDITIONS: conditions"];
    node242 -> node256;
    node257 [label="conditions"];
    node242 -> node257;
    node258 [label="RIGHT_PAREN: )"];
    node257 -> node258;
    node259 [label="conditionStatement"];
    node257 -> node259;
    node260 [label="expression"];
    node259 -> node260;
    node261 [label="level1"];
    node260 -> node261;
    node262 [label="level2"];
    node261 -> node262;
    node263 [label="variable"];
    node262 -> node263;
    node264 [label="IDENTIFIER: success"];
    node263 -> node264;
    node265 [label="LEFT_PAREN: ("];
    node257 -> node265;
    node266 [label="ARROW_EQUALS: =>"];
    node242 -> node266;
    node267 [label="toNode"];
    node242 -> node267;
    node268 [label="IDENTIFIER: reject"];
    node267 -> node268;
    node269 [label="ARROW: ->"];
    node242 -> node269;
    node270 [label="fromNode"];
    node242 -> node270;
    node271 [label="IDENTIFIER: check"];
    node270 -> node271;
    node272 [label="TRANSITIONS: transitions"];
    node151 -> node272;
    node273 [label="RIGHT_BRACE: }"];
    node151 -> node273;
    node274 [label="LEFT_BRACE: {"];
    node151 -> node274;
    node275 [label="SEMICOLON: ;"];
    node151 -> node275;
    node276 [label="SEMICOLON: ;"];
    node151 -> node276;
    node277 [label="SEMICOLON: ;"];
    node151 -> node277;
    node278 [label="SEMICOLON: ;"];
    node151 -> node278;
    node279 [label="MAIN: main"];
    node1 -> node279;
    node280 [label="GRAPH: graph"];
    node1 -> node280;
}
