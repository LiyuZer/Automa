digraph AST {
    node0 [label="program"]
    node0 -> node1
    node1 [label="graphDec"]
    node1 -> node2
    node2 [label="graphDef"]
    node2 -> node3
    node3 [label="parameterDef({c: expression(type=), })"]
    node2 -> node4
    node4 [label="nodeDef"]
    node4 -> node5
    node5 [label="nodeDefStatements(node=start, type=ST)"]
    node2 -> node6
    node6 [label="transitionDef"]
    node6 -> node7
    node7 [label="transitionDefStatements(fromNode=start, toNode=once)"]
    node7 -> node8
    node8 [label="expression(type=)"]
    node8 -> node9
    node9 [label="binaryExpression(op=<)"]
    node9 -> node10
    node10 [label="variable(name=x)"]
    node9 -> node11
    node11 [label="integerLiteral(value=5)"]
    node7 -> node12
    node12 [label="expression(type=)"]
    node12 -> node13
    node13 [label="assignmentExpression(variable=a)"]
    node13 -> node14
    node14 [label="expression(type=)"]
    node14 -> node15
    node15 [label="binaryExpression(op=+)"]
    node15 -> node16
    node16 [label="integerLiteral(value=5)"]
    node15 -> node17
    node17 [label="integerLiteral(value=6)"]
    node2 -> node18
    node18 [label="accept"]
    node0 -> node19
    node19 [label="graphDec"]
    node19 -> node20
    node20 [label="graphDef"]
    node20 -> node21
    node21 [label="parameterDef({c: expression(type=), })"]
    node20 -> node22
    node22 [label="nodeDef"]
    node22 -> node23
    node23 [label="nodeDefStatements(node=start, type=ST)"]
    node22 -> node24
    node24 [label="nodeDefStatements(node=j, type=)"]
    node22 -> node25
    node25 [label="nodeDefStatements(node=hey, type=)"]
    node22 -> node26
    node26 [label="nodeDefStatements(node=once, type=)"]
    node22 -> node27
    node27 [label="nodeDefStatements(node=moon, type=)"]
    node20 -> node28
    node28 [label="transitionDef"]
    node28 -> node29
    node29 [label="transitionDefStatements(fromNode=start, toNode=once)"]
    node29 -> node30
    node30 [label="expression(type=)"]
    node30 -> node31
    node31 [label="binaryExpression(op=<)"]
    node31 -> node32
    node32 [label="variable(name=x)"]
    node31 -> node33
    node33 [label="integerLiteral(value=5)"]
    node29 -> node34
    node34 [label="expression(type=)"]
    node34 -> node35
    node35 [label="assignmentExpression(variable=a)"]
    node35 -> node36
    node36 [label="expression(type=)"]
    node36 -> node37
    node37 [label="binaryExpression(op=+)"]
    node37 -> node38
    node38 [label="integerLiteral(value=5)"]
    node37 -> node39
    node39 [label="integerLiteral(value=6)"]
    node29 -> node40
    node40 [label="expression(type=)"]
    node40 -> node41
    node41 [label="assignmentExpression(variable=b)"]
    node41 -> node42
    node42 [label="expression(type=)"]
    node42 -> node43
    node43 [label="binaryExpression(op=+)"]
    node43 -> node44
    node44 [label="integerLiteral(value=10)"]
    node43 -> node45
    node45 [label="integerLiteral(value=8)"]
    node28 -> node46
    node46 [label="transitionDefStatements(fromNode=hey, toNode=once)"]
    node46 -> node47
    node47 [label="expression(type=)"]
    node47 -> node48
    node48 [label="binaryExpression(op=<)"]
    node48 -> node49
    node49 [label="variable(name=x)"]
    node48 -> node50
    node50 [label="integerLiteral(value=5)"]
    node46 -> node51
    node51 [label="expression(type=)"]
    node51 -> node52
    node52 [label="assignmentExpression(variable=a)"]
    node52 -> node53
    node53 [label="expression(type=)"]
    node53 -> node54
    node54 [label="binaryExpression(op=+)"]
    node54 -> node55
    node55 [label="integerLiteral(value=5)"]
    node54 -> node56
    node56 [label="integerLiteral(value=6)"]
    node28 -> node57
    node57 [label="transitionDefStatements(fromNode=start, toNode=moon)"]
    node57 -> node58
    node58 [label="expression(type=)"]
    node58 -> node59
    node59 [label="expression(type=)"]
    node59 -> node60
    node60 [label="binaryExpression(op=<)"]
    node60 -> node61
    node61 [label="variable(name=x)"]
    node60 -> node62
    node62 [label="integerLiteral(value=5)"]
    node57 -> node63
    node63 [label="expression(type=)"]
    node63 -> node64
    node64 [label="assignmentExpression(variable=a)"]
    node64 -> node65
    node65 [label="expression(type=)"]
    node65 -> node66
    node66 [label="binaryExpression(op=+)"]
    node66 -> node67
    node67 [label="integerLiteral(value=5)"]
    node66 -> node68
    node68 [label="integerLiteral(value=6)"]
    node20 -> node69
    node69 [label="accept"]
}